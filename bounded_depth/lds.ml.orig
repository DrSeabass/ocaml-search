(* $Id: lds.ml,v 1.1 2003/07/17 19:12:42 ruml Exp ruml $

   lds and ilds
*)


exception Halted


(******** limited-discrepancy search

  can easily support an indexed scheme in which child n costs n discrepancies

  don't need meaningful depth bound
********)


(******** `improved' limited-discrepancy search ********)

(* counts all not-most-preferred children as one discrepancy *)


let ilds_iteration node info max_depth num_discreps brancher =
  (** main ilds function, parameterized by the branching policy *)
  let rec visit node discreps_needed depth_remaining =
    (** returns true if discreps were used up.  if no branch uses up the
      discrepancies, this indicates that we have explored the entire tree.
      side-effects on info *)
    assert (discreps_needed >= 0);
    assert (depth_remaining >= discreps_needed);
    Verb.pe Verb.debug "iteration go\n%!";
    if (Info.halt_p info)
    then (Verb.pe Verb.debug "halting on halt_p\n%!";
	  raise Halted)
    else if (Info.leaf_p info node)
    then (if (Info.optimal_p info node)
	  then (Verb.pe Verb.debug "halting on optimal_p\n%!";
		raise Halted);
	  Verb.pe Verb.debug "Non optimal leaf, 0 discreps\n%!";
	  discreps_needed = 0)
    else if (Info.prune_p info node) || (Info.num_children info node) = 0
    then (Verb.pe Verb.debug "no kids or pruned \n%!";
	  discreps_needed = 0)
    else
      (Verb.pe Verb.debug "Calling brancher\n%!";
       Info.incr_branches info;
       brancher node info discreps_needed depth_remaining visit)
  in
    visit node num_discreps max_depth


let visit_non_preferred n info discreps_needed depth_remaining visit =
  if (discreps_needed > 0) then
    let used_up = ref false in
      for i = 1 to (Info.num_children info n) - 1 do
	if (visit (Info.get_child info n i) (discreps_needed - 1)
	      (depth_remaining - 1)) then
	  used_up := true
      done;
      !used_up
  else
    false


let visit_preferred n info discreps_needed depth_remaining visit =
  if (depth_remaining > discreps_needed) then
    visit (Info.get_child info n 0) discreps_needed (depth_remaining - 1)
  else
    false


let ilds_top_brancher n info discreps_needed depth_remaining visit =
  let non = visit_non_preferred n info discreps_needed depth_remaining visit in
  let pref = visit_preferred n info discreps_needed depth_remaining visit in
    non || pref


let ilds_bottom_brancher n info discreps_needed depth_remaining visit =
  Verb.pe Verb.debug "%i depth %i kids\n%!" depth_remaining
    (Info.num_children info n);
  let pref = visit_preferred n info discreps_needed depth_remaining visit in
  let non = visit_non_preferred n info discreps_needed depth_remaining visit in
    pref || non


let ilds_iterations node info max_depth brancher =
  (** returns true when tree is exhasuted *)
  let rec next_pass num_discreps =
    Verb.pe Verb.debug "lds.next_pass %i\n%!" num_discreps;
    let used_all = ilds_iteration node info max_depth num_discreps brancher in
      if (num_discreps = max_depth)
      then (Verb.pe Verb.debug "Exhausted tree\n%!";
	    true)
      else if (not used_all)
      then (* no branch used all discrepancies - done with tree! *)
	(Verb.pe Verb.debug "Not used all, tree exhausted\n%!";
	 true)
      else
	next_pass (num_discreps + 1)
  in
    next_pass 0


type discrepancy_order = TopFirst | BottomFirst


let ilds_top
  (* returns optional node, stats, optimal (does sol satisfy optimal_p),
     complete (was entire space searched) *)
  ?(discrep_order = TopFirst)
  ?(optimal_p = (Fn.constantly1 false))
  ?(prune_p = (Fn.constantly2 false))
  ?(prev_best = None)
  ?(halt = [Info.Never])
  ?(log = Fn.no_op2)
  copy_state
  max_depth
  better_p
  leaf_p
  num_children
  get_child
  initial
  =
  let info = Info.make num_children get_child leaf_p better_p optimal_p
	       copy_state prune_p log prev_best halt
  and brancher = (match discrep_order with
		    TopFirst -> ilds_top_brancher
		  | BottomFirst -> ilds_bottom_brancher) in
  let complete = (if Info.optimal_so_far info then
		    Info.leaf_or_prune_p info initial
		  else
		    try
		      ilds_iterations initial info max_depth brancher
		    with Halted | Sys.Break -> false)
  in
    (Info.curr_best info),
    (Info.stats info),
    (Info.optimal_so_far info),
    complete


let ilds_bottom
  ?(optimal_p = (Fn.constantly1 false))
  ?(prune_p = (Fn.constantly2 false))
  ?(prev_best = None)
  ?(halt = [Info.Never])
  ?(log = Fn.no_op2)
  copy_state
  max_depth
  better_p
  leaf_p
  get_child
  initial
  = ilds_top
      ~discrep_order:BottomFirst
      ~optimal_p:optimal_p
      ~prune_p:prune_p
      ~prev_best:prev_best
      ~halt:halt
      ~log:log
      copy_state
      max_depth
      better_p
      leaf_p
      get_child
      initial


let test_ilds_top () =
  let depth = 2 in
    ilds_top
      ~optimal_p:Bounded_depth_test.optimal_p
      Fn.identity
      depth
      Bounded_depth_test.better_p
      Bounded_depth_test.leaf_p
      Bounded_depth_test.num_children
      Bounded_depth_test.get_child
      (Bounded_depth_test.make_initial depth 3)

let test_ilds_bottom () =
  let depth = 2 in
    ilds_bottom
      ~optimal_p:Bounded_depth_test.optimal_p
      Fn.identity
      depth
      Bounded_depth_test.better_p
      Bounded_depth_test.leaf_p
      Bounded_depth_test.num_children
      Bounded_depth_test.get_child
      (Bounded_depth_test.make_initial depth 3)


(* EOF *)
